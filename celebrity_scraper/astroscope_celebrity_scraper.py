# -*- coding: utf-8 -*-
"""2/26 astroscope_celebrity_scraper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FUCQgghwkz8-myymJyQv1XwmBxQw9MHR
"""

import requests
import csv
from bs4 import BeautifulSoup

"""# Functions"""

#FUNCTION 1
#scrape top celebs for EVERY birthday
def allDates(test=False): 
  for m in range(1, 13):
    for d in range(1, 32):
      #month
      month = ''
      if m == 1:
        month = 'january'
      if m == 2:
        month = 'february'
      if m == 3:
        month ='march'
      if m == 4:
        month ='april'
      if m == 5:
        month ='may'
      if m == 6:
        month ='june'
      if m == 7:
        month ='july'
      if m == 8:
        month ='august'
      if m == 9:
        month ='september'
      if m == 10:
        month ='october'
      if m == 11:
        month ='november'
      if m == 12:
        month ='december'

      #get day and send to scraper
      if m == 2:
        if d < 30:
          print(month+str(d)) if test else get_top_celebs(month+str(d))
      elif m == 4:
        if d < 31:
          print(month+str(d)) if test else get_top_celebs(month+str(d))
      elif m == 9:
        if d < 31:
          print(month+str(d)) if test else get_top_celebs(month+str(d))
      elif m == 11:
        if d < 31:
          print(month+str(d)) if test else get_top_celebs(month+str(d))
      else:
        print(month+str(d)) if test else get_top_celebs(month+str(d))

#test
#allDates(test=True)

"""# famousbirthdays"""

#scrape top celebs born on a given date
def get_top_celebs(birthday, test=False):
    base_url = "https://www.famousbirthdays.com/"
    base_url += str(birthday)
    base_url += '.html'

    html_content = requests.get(base_url).text
    soup = BeautifulSoup(html_content, "lxml")


    #celeb profile links
    celeb = str(soup)
    celeb = soup.find_all(class_ ="face person-item clearfix")
    celeb = str(celeb).split('<a class="face person-item clearfix" href="https://www.famousbirthdays.com/people/')
    for i in range(1, 49):
      try:
        celeb[i] = celeb[i].split('" style="background: url')
        celeb[i] = celeb[i][0]
      except (IndexError):
        celeb[i] = ''
      #send each profile to celeb scraper
      scrape_celeb(celeb[i], i, birthday)
      if test and i > 3: break


#unit test
#get_top_celebs('january1')

#scrape celeb famousbirthday profile, given a url
def scrape_celeb(famousbirthdays, popularity, birthday):
    base_url = "https://www.famousbirthdays.com/people/"
    base_url += str(famousbirthdays)

    html_content = requests.get(base_url).text
    soup = BeautifulSoup(html_content, "lxml")


    #celeb name
    try:
      celeb = str(soup)
      celeb = celeb.split('<div class="col-sm-12">\n<h1>')
      celeb = celeb[1].split('<div class="person-title">')[0]
    except (IndexError):
      celeb = ''

    #astrology sign
    try:
      astrosign = str(soup)
      astrosign = astrosign.split('<a href="/astrology/')
      astrosign = astrosign[1].split('.html">')[1]
      astrosign = astrosign.split('</a>')[0]
    except (IndexError):
      astrosign = ''

    #birthyear
    try:
      birthyear = str(soup)
      birthyear = birthyear.split('<a href="/year/')
      birthyear = birthyear[1][:4]
    except (IndexError):
      birthyear = ''

    #birthmonthday
    try:
      birthmonthday = str(soup)
      birthmonthday = birthmonthday.split('<span class="title">Born on ')
      birthmonthday = birthmonthday[1].split('</span><span class="rank">')[0]
    except (IndexError):
      birthmonthday = ''

    #birthplace
    try:
      birthplace = str(soup)
      birthplace = birthplace.split('<a href="/birthplace/')[1]
      birthplace = birthplace.split('>')[1]
      birthplace = birthplace.strip(' ')
      birthplace = birthplace.split('<')[0]
    except (IndexError):
      birthplace = ''
    #format 
    celeb = celeb.rstrip('\n')

    #print

    #send celeb name to personality database
    if celeb.find(' ') != -1:
      scrape_profile_number(celeb, famousbirthdays, popularity, astrosign, birthmonthday, birthyear, birthplace)


#unit test
#scrape_celeb('weston-koury.html', '1', 'january7')

"""# Personality Database"""

#scrape personality-database profile number given a name
def scrape_profile_number(celeb, famousbirthdays, popularity, astrosign, birthmonthday, birthyear, birthplace):
    #concatenate url, get html content
    base_url = "https://api.personality-database.com/api/v1/search?query="
    base_url += str(celeb).replace(' ', '+')

    html_content = requests.get(base_url).text
    soup = BeautifulSoup(html_content, "lxml")

    #scrape profile number
    profile = str(soup)

    if len(profile) > 250:    
      profile = profile.split(',"id":')
      profile = profile[1].split(',"user_id"')

      #check if profile number is valid
      if profile[0].isdigit():
        #print(profile[0])
        scrape_personality(profile[0], celeb, famousbirthdays, popularity, astrosign, birthmonthday, birthyear, birthplace)

#unit test
#scrape_profile_number('Nicolas Cage', '', '', '', '', '', '')

#scrape personality given profile number
def scrape_personality(personalitydatabase, celeb, famousbirthdays, popularity, astrosign, birthmonthday, birthyear, birthplace):
    #concatenate url, get html content
    base_url = "https://api.personality-database.com/api/v1/profile/"
    base_url += str(personalitydatabase)

    html_content = requests.get(base_url).text
    soup = BeautifulSoup(html_content, "lxml")

    #scrape name
    name = str(soup)
    name = name.split('"mbti_profile":"')
    name = name[1].split('","profile_name_searchable"')

    #scrape personality type
    mbit = str(soup)
    mbit = mbit.split('personality_type":"')
    mbit = mbit[1][:4]

    #scrape percentages for personality type
    pct = str(soup)
    pct = pct.split('"percentage":"')
    try:
      pct1 = pct[1].split('"},{')
      pct2 = pct[2].split('"},{')
      pct3 = pct[3].split('"},{')
      pct4 = pct[4].split('"}],"')

      #print if name is not blank and contains a space
      if len(name[0]) > 0 and name[0].find(' ') != -1:
        if name[0].find('\\') != -1: 
          name[0] = name[0].replace('\\','')
        #print only if valid
        if pct1[0][-1:] == '%':
          #strip % from mbit pct's
          pct1[0] = pct1[0].strip('%')
          pct2[0] = pct2[0].strip('%')
          pct3[0] = pct3[0].strip('%')
          pct4[0] = pct4[0].strip('%')

          #print
          print(popularity, celeb, birthmonthday, birthyear, birthplace, astrosign, mbit, pct1[0], pct2[0], pct3[0], pct4[0], famousbirthdays, personalitydatabase)

    except IndexError:
      print('indexerror')
    

#unit test
#scrape_personality(263875, '', '', '', '', '', '', '')

"""# Main

"""

#scrape a specific date
#test=True will only scrape the first 3
get_top_celebs("january7", test=True)

#scrape all dates
#test=True only prints the dates, instead of sending each date to get_top_celebs
#allDates(test=True)